use criterion::{criterion_group, criterion_main, Criterion};
use pallas_codec::utils::{KeepRaw, OnlyRaw};
use pallas_primitives::alonzo::AuxiliaryData;

const AUXILARY_HEX: &'static str = "d90103a100a11902d1a278386238663665376634326563336264303239363662343034313131616530653233636238356539303236343462666237636539343036303766a1781c63756d44796e616d6963496e746567726174696f6e456e67696e6565a76538316e6f6e6868617264776172656b383973696d696c697175656d41646d696e6973747261746f726b6465736372697074696f6e783e4d79206e65696768626f7220416c69646120686173206f6e65206f662074686573652e2053686520776f726b7320617320612067616d626c657220616e646566696c657383a3696d656469615479706569696d6167652f706e67646e616d65781c63756d44796e616d6963496e746567726174696f6e456e67696e6565637372637835697066733a2f2f516d5a46373437504659565a6d5161363163777351555268586131783634344b415631377778766b454238756577a3696d656469615479706569696d6167652f706e67646e616d65781c63756d44796e616d6963496e746567726174696f6e456e67696e6565637372637835697066733a2f2f516d644633466b59395277686d74783636534e773373637555756f444852745439684e4d36646f63553767326544a3696d656469615479706569696d6167652f706e67646e616d65781c63756d44796e616d6963496e746567726174696f6e456e67696e6565637372637835697066733a2f2f516d62614a75504e336a463857535544667659687a75324b5a716d6a517868506135736d666245445363366a695765696d6167657835697066733a2f2f516d6156524a7a343652384e72476b4a58684c6170316145323642676a365367746564393442734a487576437556696d656469615479706569696d6167652f706e67646e616d65781c63756d44796e616d6963496e746567726174696f6e456e67696e65656776657273696f6e63312e30";

fn auxilary_data_benches(c: &mut Criterion) {
    let bytes = hex::decode(AUXILARY_HEX).unwrap();

    let mut group = c.benchmark_group("Alonzo Auxilary Data Decoding");
    group.bench_function("KeepRaw<AuxiliaryData>", |b| {
        b.iter(|| {
            let _aux: KeepRaw<AuxiliaryData> =
                pallas_codec::minicbor::decode(bytes.as_slice()).unwrap();
        });
    });

    group.bench_function("OnlyRaw<AuxiliaryData>", |b| {
        b.iter(|| {
            let _aux: OnlyRaw<AuxiliaryData> =
                pallas_codec::minicbor::decode(bytes.as_slice()).unwrap();
        });
    });

    group.finish();
}

criterion_group!(benches, auxilary_data_benches);

criterion_main!(benches);